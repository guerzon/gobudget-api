// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/guerzon/gobudget-api/pkg/db (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination pkg/mock/store.go github.com/guerzon/gobudget-api/pkg/db Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/guerzon/gobudget-api/pkg/db"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateBudget mocks base method.
func (m *MockStore) CreateBudget(arg0 context.Context, arg1 db.CreateBudgetParams) (db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", arg0, arg1)
	ret0, _ := ret[0].(db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget.
func (mr *MockStoreMockRecorder) CreateBudget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockStore)(nil).CreateBudget), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateCategoryGroup mocks base method.
func (m *MockStore) CreateCategoryGroup(arg0 context.Context, arg1 db.CreateCategoryGroupParams) (db.CategoryGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoryGroup", arg0, arg1)
	ret0, _ := ret[0].(db.CategoryGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategoryGroup indicates an expected call of CreateCategoryGroup.
func (mr *MockStoreMockRecorder) CreateCategoryGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoryGroup", reflect.TypeOf((*MockStore)(nil).CreateCategoryGroup), arg0, arg1)
}

// CreatePayee mocks base method.
func (m *MockStore) CreatePayee(arg0 context.Context, arg1 db.CreatePayeeParams) (db.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayee", arg0, arg1)
	ret0, _ := ret[0].(db.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayee indicates an expected call of CreatePayee.
func (mr *MockStoreMockRecorder) CreatePayee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayee", reflect.TypeOf((*MockStore)(nil).CreatePayee), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserParams, arg2 func(db.UserParams) error) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1, arg2)
}

// CreateVerifyEmails mocks base method.
func (m *MockStore) CreateVerifyEmails(arg0 context.Context, arg1 db.CreateVerifyEmailsParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmails", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmails indicates an expected call of CreateVerifyEmails.
func (mr *MockStoreMockRecorder) CreateVerifyEmails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmails", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmails), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAccounts mocks base method.
func (m *MockStore) DeleteAccounts(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccounts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccounts indicates an expected call of DeleteAccounts.
func (mr *MockStoreMockRecorder) DeleteAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccounts", reflect.TypeOf((*MockStore)(nil).DeleteAccounts), arg0, arg1)
}

// DeleteBudget mocks base method.
func (m *MockStore) DeleteBudget(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudget", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBudget indicates an expected call of DeleteBudget.
func (mr *MockStoreMockRecorder) DeleteBudget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudget", reflect.TypeOf((*MockStore)(nil).DeleteBudget), arg0, arg1)
}

// DeleteBudgetTx mocks base method.
func (m *MockStore) DeleteBudgetTx(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudgetTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBudgetTx indicates an expected call of DeleteBudgetTx.
func (mr *MockStoreMockRecorder) DeleteBudgetTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgetTx", reflect.TypeOf((*MockStore)(nil).DeleteBudgetTx), arg0, arg1)
}

// DeleteBudgets mocks base method.
func (m *MockStore) DeleteBudgets(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudgets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBudgets indicates an expected call of DeleteBudgets.
func (mr *MockStoreMockRecorder) DeleteBudgets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgets", reflect.TypeOf((*MockStore)(nil).DeleteBudgets), arg0, arg1)
}

// DeleteCategories mocks base method.
func (m *MockStore) DeleteCategories(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategories indicates an expected call of DeleteCategories.
func (mr *MockStoreMockRecorder) DeleteCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategories", reflect.TypeOf((*MockStore)(nil).DeleteCategories), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteCategoryGroup mocks base method.
func (m *MockStore) DeleteCategoryGroup(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryGroup indicates an expected call of DeleteCategoryGroup.
func (mr *MockStoreMockRecorder) DeleteCategoryGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryGroup", reflect.TypeOf((*MockStore)(nil).DeleteCategoryGroup), arg0, arg1)
}

// DeleteCategoryGroupTx mocks base method.
func (m *MockStore) DeleteCategoryGroupTx(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryGroupTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryGroupTx indicates an expected call of DeleteCategoryGroupTx.
func (mr *MockStoreMockRecorder) DeleteCategoryGroupTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryGroupTx", reflect.TypeOf((*MockStore)(nil).DeleteCategoryGroupTx), arg0, arg1)
}

// DeleteCategoryGroups mocks base method.
func (m *MockStore) DeleteCategoryGroups(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryGroups", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryGroups indicates an expected call of DeleteCategoryGroups.
func (mr *MockStoreMockRecorder) DeleteCategoryGroups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryGroups", reflect.TypeOf((*MockStore)(nil).DeleteCategoryGroups), arg0, arg1)
}

// DeletePayee mocks base method.
func (m *MockStore) DeletePayee(arg0 context.Context, arg1 db.DeletePayeeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayee indicates an expected call of DeletePayee.
func (mr *MockStoreMockRecorder) DeletePayee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayee", reflect.TypeOf((*MockStore)(nil).DeletePayee), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserSessions mocks base method.
func (m *MockStore) DeleteUserSessions(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessions indicates an expected call of DeleteUserSessions.
func (mr *MockStoreMockRecorder) DeleteUserSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessions", reflect.TypeOf((*MockStore)(nil).DeleteUserSessions), arg0, arg1)
}

// DeleteUserTx mocks base method.
func (m *MockStore) DeleteUserTx(arg0 context.Context, arg1 db.UserParams, arg2 []uuid.UUID, arg3 func(db.UserParams) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTx indicates an expected call of DeleteUserTx.
func (mr *MockStoreMockRecorder) DeleteUserTx(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTx", reflect.TypeOf((*MockStore)(nil).DeleteUserTx), arg0, arg1, arg2, arg3)
}

// DeleteVerifyEmails mocks base method.
func (m *MockStore) DeleteVerifyEmails(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerifyEmails", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVerifyEmails indicates an expected call of DeleteVerifyEmails.
func (mr *MockStoreMockRecorder) DeleteVerifyEmails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifyEmails", reflect.TypeOf((*MockStore)(nil).DeleteVerifyEmails), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 db.GetAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockStore) GetAccounts(arg0 context.Context, arg1 uuid.UUID) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockStoreMockRecorder) GetAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockStore)(nil).GetAccounts), arg0, arg1)
}

// GetBudget mocks base method.
func (m *MockStore) GetBudget(arg0 context.Context, arg1 db.GetBudgetParams) (db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudget", arg0, arg1)
	ret0, _ := ret[0].(db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudget indicates an expected call of GetBudget.
func (mr *MockStoreMockRecorder) GetBudget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudget", reflect.TypeOf((*MockStore)(nil).GetBudget), arg0, arg1)
}

// GetBudgetAccount mocks base method.
func (m *MockStore) GetBudgetAccount(arg0 context.Context, arg1 db.GetBudgetAccountParams) (db.GetBudgetAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.GetBudgetAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetAccount indicates an expected call of GetBudgetAccount.
func (mr *MockStoreMockRecorder) GetBudgetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetAccount", reflect.TypeOf((*MockStore)(nil).GetBudgetAccount), arg0, arg1)
}

// GetBudgetDetails mocks base method.
func (m *MockStore) GetBudgetDetails(arg0 context.Context, arg1 db.GetBudgetDetailsParams) (db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetDetails", arg0, arg1)
	ret0, _ := ret[0].(db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetDetails indicates an expected call of GetBudgetDetails.
func (mr *MockStoreMockRecorder) GetBudgetDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetDetails", reflect.TypeOf((*MockStore)(nil).GetBudgetDetails), arg0, arg1)
}

// GetBudgets mocks base method.
func (m *MockStore) GetBudgets(arg0 context.Context, arg1 string) ([]db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgets", arg0, arg1)
	ret0, _ := ret[0].([]db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgets indicates an expected call of GetBudgets.
func (mr *MockStoreMockRecorder) GetBudgets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgets", reflect.TypeOf((*MockStore)(nil).GetBudgets), arg0, arg1)
}

// GetCategories mocks base method.
func (m *MockStore) GetCategories(arg0 context.Context, arg1 uuid.UUID) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockStoreMockRecorder) GetCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockStore)(nil).GetCategories), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 uuid.UUID) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetCategoryGroup mocks base method.
func (m *MockStore) GetCategoryGroup(arg0 context.Context, arg1 uuid.UUID) (db.CategoryGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryGroup", arg0, arg1)
	ret0, _ := ret[0].(db.CategoryGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryGroup indicates an expected call of GetCategoryGroup.
func (mr *MockStoreMockRecorder) GetCategoryGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryGroup", reflect.TypeOf((*MockStore)(nil).GetCategoryGroup), arg0, arg1)
}

// GetCategoryGroupsByBudgetId mocks base method.
func (m *MockStore) GetCategoryGroupsByBudgetId(arg0 context.Context, arg1 uuid.UUID) ([]db.CategoryGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryGroupsByBudgetId", arg0, arg1)
	ret0, _ := ret[0].([]db.CategoryGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryGroupsByBudgetId indicates an expected call of GetCategoryGroupsByBudgetId.
func (mr *MockStoreMockRecorder) GetCategoryGroupsByBudgetId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryGroupsByBudgetId", reflect.TypeOf((*MockStore)(nil).GetCategoryGroupsByBudgetId), arg0, arg1)
}

// GetPayeeById mocks base method.
func (m *MockStore) GetPayeeById(arg0 context.Context, arg1 uuid.UUID) (db.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayeeById", arg0, arg1)
	ret0, _ := ret[0].(db.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayeeById indicates an expected call of GetPayeeById.
func (mr *MockStoreMockRecorder) GetPayeeById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayeeById", reflect.TypeOf((*MockStore)(nil).GetPayeeById), arg0, arg1)
}

// GetPayees mocks base method.
func (m *MockStore) GetPayees(arg0 context.Context, arg1 uuid.UUID) ([]db.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayees", arg0, arg1)
	ret0, _ := ret[0].([]db.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayees indicates an expected call of GetPayees.
func (mr *MockStoreMockRecorder) GetPayees(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayees", reflect.TypeOf((*MockStore)(nil).GetPayees), arg0, arg1)
}

// GetPendingVerifyEmails mocks base method.
func (m *MockStore) GetPendingVerifyEmails(arg0 context.Context, arg1 db.GetPendingVerifyEmailsParams) ([]db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingVerifyEmails", arg0, arg1)
	ret0, _ := ret[0].([]db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingVerifyEmails indicates an expected call of GetPendingVerifyEmails.
func (mr *MockStoreMockRecorder) GetPendingVerifyEmails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingVerifyEmails", reflect.TypeOf((*MockStore)(nil).GetPendingVerifyEmails), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTransactions mocks base method.
func (m *MockStore) GetTransactions(arg0 context.Context, arg1 uuid.UUID) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockStoreMockRecorder) GetTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockStore)(nil).GetTransactions), arg0, arg1)
}

// GetTransactionsById mocks base method.
func (m *MockStore) GetTransactionsById(arg0 context.Context, arg1 uuid.UUID) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsById", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsById indicates an expected call of GetTransactionsById.
func (mr *MockStoreMockRecorder) GetTransactionsById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsById", reflect.TypeOf((*MockStore)(nil).GetTransactionsById), arg0, arg1)
}

// GetTransactionsView mocks base method.
func (m *MockStore) GetTransactionsView(arg0 context.Context, arg1 uuid.UUID) ([]db.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsView", arg0, arg1)
	ret0, _ := ret[0].([]db.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsView indicates an expected call of GetTransactionsView.
func (mr *MockStoreMockRecorder) GetTransactionsView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsView", reflect.TypeOf((*MockStore)(nil).GetTransactionsView), arg0, arg1)
}

// GetTransactionsViewById mocks base method.
func (m *MockStore) GetTransactionsViewById(arg0 context.Context, arg1 uuid.UUID) (db.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsViewById", arg0, arg1)
	ret0, _ := ret[0].(db.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsViewById indicates an expected call of GetTransactionsViewById.
func (mr *MockStoreMockRecorder) GetTransactionsViewById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsViewById", reflect.TypeOf((*MockStore)(nil).GetTransactionsViewById), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0)
}

// GetVerifyEmails mocks base method.
func (m *MockStore) GetVerifyEmails(arg0 context.Context, arg1 db.GetVerifyEmailsParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmails", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmails indicates an expected call of GetVerifyEmails.
func (mr *MockStoreMockRecorder) GetVerifyEmails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmails", reflect.TypeOf((*MockStore)(nil).GetVerifyEmails), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 db.UpdateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateCategoryGroup mocks base method.
func (m *MockStore) UpdateCategoryGroup(arg0 context.Context, arg1 db.UpdateCategoryGroupParams) (db.CategoryGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryGroup", arg0, arg1)
	ret0, _ := ret[0].(db.CategoryGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategoryGroup indicates an expected call of UpdateCategoryGroup.
func (mr *MockStoreMockRecorder) UpdateCategoryGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryGroup", reflect.TypeOf((*MockStore)(nil).UpdateCategoryGroup), arg0, arg1)
}

// UpdateCodeUsed mocks base method.
func (m *MockStore) UpdateCodeUsed(arg0 context.Context, arg1 string) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodeUsed", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCodeUsed indicates an expected call of UpdateCodeUsed.
func (mr *MockStoreMockRecorder) UpdateCodeUsed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodeUsed", reflect.TypeOf((*MockStore)(nil).UpdateCodeUsed), arg0, arg1)
}

// UpdatePayee mocks base method.
func (m *MockStore) UpdatePayee(arg0 context.Context, arg1 db.UpdatePayeeParams) (db.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayee", arg0, arg1)
	ret0, _ := ret[0].(db.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayee indicates an expected call of UpdatePayee.
func (mr *MockStoreMockRecorder) UpdatePayee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayee", reflect.TypeOf((*MockStore)(nil).UpdatePayee), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockStore) UpdateTransaction(arg0 context.Context, arg1 db.UpdateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockStoreMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockStore)(nil).UpdateTransaction), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserTx mocks base method.
func (m *MockStore) UpdateUserTx(arg0 context.Context, arg1 db.UpdateUserParams, arg2 func(db.UserParams) error) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserTx indicates an expected call of UpdateUserTx.
func (mr *MockStoreMockRecorder) UpdateUserTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTx", reflect.TypeOf((*MockStore)(nil).UpdateUserTx), arg0, arg1, arg2)
}
