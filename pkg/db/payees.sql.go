// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payees.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPayee = `-- name: CreatePayee :one
INSERT INTO payees (
    budget_id,
    name
) VALUES (
    $1, $2
) RETURNING id, budget_id, name
`

type CreatePayeeParams struct {
	BudgetID uuid.UUID `json:"budget_id"`
	Name     string    `json:"name"`
}

func (q *Queries) CreatePayee(ctx context.Context, arg CreatePayeeParams) (Payee, error) {
	row := q.db.QueryRow(ctx, createPayee, arg.BudgetID, arg.Name)
	var i Payee
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}

const deletePayee = `-- name: DeletePayee :exec
DELETE FROM payees WHERE budget_id = $1 AND id = $2
`

type DeletePayeeParams struct {
	BudgetID uuid.UUID `json:"budget_id"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) DeletePayee(ctx context.Context, arg DeletePayeeParams) error {
	_, err := q.db.Exec(ctx, deletePayee, arg.BudgetID, arg.ID)
	return err
}

const getPayeeById = `-- name: GetPayeeById :one
SELECT id, budget_id, name FROM payees WHERE id = $1
`

func (q *Queries) GetPayeeById(ctx context.Context, id uuid.UUID) (Payee, error) {
	row := q.db.QueryRow(ctx, getPayeeById, id)
	var i Payee
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}

const getPayees = `-- name: GetPayees :many
SELECT id, budget_id, name FROM payees WHERE budget_id = $1
`

func (q *Queries) GetPayees(ctx context.Context, budgetID uuid.UUID) ([]Payee, error) {
	rows, err := q.db.Query(ctx, getPayees, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payee{}
	for rows.Next() {
		var i Payee
		if err := rows.Scan(&i.ID, &i.BudgetID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayee = `-- name: UpdatePayee :one
UPDATE payees SET name = $1 WHERE budget_id = $2 AND id = $3 RETURNING id, budget_id, name
`

type UpdatePayeeParams struct {
	Name     string    `json:"name"`
	BudgetID uuid.UUID `json:"budget_id"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePayee(ctx context.Context, arg UpdatePayeeParams) (Payee, error) {
	row := q.db.QueryRow(ctx, updatePayee, arg.Name, arg.BudgetID, arg.ID)
	var i Payee
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}
