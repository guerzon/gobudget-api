// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category_groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategoryGroup = `-- name: CreateCategoryGroup :one
INSERT INTO category_groups (
    budget_id,
    name
) VALUES (
    $1, $2
)
RETURNING id, budget_id, name
`

type CreateCategoryGroupParams struct {
	BudgetID uuid.UUID `json:"budget_id"`
	Name     string    `json:"name"`
}

func (q *Queries) CreateCategoryGroup(ctx context.Context, arg CreateCategoryGroupParams) (CategoryGroup, error) {
	row := q.db.QueryRow(ctx, createCategoryGroup, arg.BudgetID, arg.Name)
	var i CategoryGroup
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}

const deleteCategoryGroup = `-- name: DeleteCategoryGroup :exec
DELETE FROM category_groups WHERE id = $1
`

func (q *Queries) DeleteCategoryGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryGroup, id)
	return err
}

const deleteCategoryGroups = `-- name: DeleteCategoryGroups :exec
DELETE FROM category_groups WHERE budget_id = $1
`

func (q *Queries) DeleteCategoryGroups(ctx context.Context, budgetID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryGroups, budgetID)
	return err
}

const getCategoryGroup = `-- name: GetCategoryGroup :one
SELECT id, budget_id, name FROM category_groups WHERE id = $1
`

func (q *Queries) GetCategoryGroup(ctx context.Context, id uuid.UUID) (CategoryGroup, error) {
	row := q.db.QueryRow(ctx, getCategoryGroup, id)
	var i CategoryGroup
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}

const getCategoryGroupsByBudgetId = `-- name: GetCategoryGroupsByBudgetId :many
SELECT id, budget_id, name FROM category_groups WHERE budget_id = $1
`

func (q *Queries) GetCategoryGroupsByBudgetId(ctx context.Context, budgetID uuid.UUID) ([]CategoryGroup, error) {
	rows, err := q.db.Query(ctx, getCategoryGroupsByBudgetId, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CategoryGroup{}
	for rows.Next() {
		var i CategoryGroup
		if err := rows.Scan(&i.ID, &i.BudgetID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryGroup = `-- name: UpdateCategoryGroup :one
UPDATE category_groups SET name = $1 WHERE id = $2 RETURNING id, budget_id, name
`

type UpdateCategoryGroupParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCategoryGroup(ctx context.Context, arg UpdateCategoryGroupParams) (CategoryGroup, error) {
	row := q.db.QueryRow(ctx, updateCategoryGroup, arg.Name, arg.ID)
	var i CategoryGroup
	err := row.Scan(&i.ID, &i.BudgetID, &i.Name)
	return i, err
}
