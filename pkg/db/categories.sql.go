// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    category_group_id,
    name
) VALUES (
    $1, $2
)
RETURNING id, category_group_id, name
`

type CreateCategoryParams struct {
	CategoryGroupID uuid.UUID `json:"category_group_id"`
	Name            string    `json:"name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.CategoryGroupID, arg.Name)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryGroupID, &i.Name)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories WHERE category_group_id = $1
`

func (q *Queries) DeleteCategories(ctx context.Context, categoryGroupID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategories, categoryGroupID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, category_group_id, name FROM categories WHERE category_group_id = $1
`

func (q *Queries) GetCategories(ctx context.Context, categoryGroupID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories, categoryGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.CategoryGroupID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, category_group_id, name FROM categories WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryGroupID, &i.Name)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories SET name = $1 WHERE id = $2 RETURNING id, category_group_id, name
`

type UpdateCategoryParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.ID)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryGroupID, &i.Name)
	return i, err
}
