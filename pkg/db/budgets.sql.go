// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budgets.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
    owner_username,
    name,
    currency_code
) VALUES (
    $1, $2, $3
) RETURNING id, owner_username, name, currency_code
`

type CreateBudgetParams struct {
	OwnerUsername string `json:"owner_username"`
	Name          string `json:"name"`
	CurrencyCode  string `json:"currency_code"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, createBudget, arg.OwnerUsername, arg.Name, arg.CurrencyCode)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.OwnerUsername,
		&i.Name,
		&i.CurrencyCode,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budgets WHERE id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBudget, id)
	return err
}

const deleteBudgets = `-- name: DeleteBudgets :exec
DELETE FROM budgets WHERE owner_username = $1
`

func (q *Queries) DeleteBudgets(ctx context.Context, ownerUsername string) error {
	_, err := q.db.Exec(ctx, deleteBudgets, ownerUsername)
	return err
}

const getBudget = `-- name: GetBudget :one
SELECT id, owner_username, name, currency_code FROM budgets WHERE id = $1 AND owner_username = $2
`

type GetBudgetParams struct {
	ID            uuid.UUID `json:"id"`
	OwnerUsername string    `json:"owner_username"`
}

func (q *Queries) GetBudget(ctx context.Context, arg GetBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudget, arg.ID, arg.OwnerUsername)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.OwnerUsername,
		&i.Name,
		&i.CurrencyCode,
	)
	return i, err
}

const getBudgetDetails = `-- name: GetBudgetDetails :one
SELECT id, owner_username, name, currency_code FROM budgets WHERE owner_username = $1 AND name = $2 AND currency_code = $3
`

type GetBudgetDetailsParams struct {
	OwnerUsername string `json:"owner_username"`
	Name          string `json:"name"`
	CurrencyCode  string `json:"currency_code"`
}

func (q *Queries) GetBudgetDetails(ctx context.Context, arg GetBudgetDetailsParams) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetDetails, arg.OwnerUsername, arg.Name, arg.CurrencyCode)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.OwnerUsername,
		&i.Name,
		&i.CurrencyCode,
	)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, owner_username, name, currency_code FROM budgets WHERE owner_username = $1
`

func (q *Queries) GetBudgets(ctx context.Context, ownerUsername string) ([]Budget, error) {
	rows, err := q.db.Query(ctx, getBudgets, ownerUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Budget{}
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.OwnerUsername,
			&i.Name,
			&i.CurrencyCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
