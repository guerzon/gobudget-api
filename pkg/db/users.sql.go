// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    email,
    email_verified,
    last_password_change
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, username, password, email, email_verified, created_at, last_password_change
`

type CreateUserParams struct {
	Username           string    `json:"username"`
	Password           string    `json:"password"`
	Email              string    `json:"email"`
	EmailVerified      bool      `json:"email_verified"`
	LastPasswordChange time.Time `json:"last_password_change"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.EmailVerified,
		arg.LastPasswordChange,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.LastPasswordChange,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, email_verified, created_at, last_password_change FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.LastPasswordChange,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, email_verified, created_at, last_password_change FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.LastPasswordChange,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, email_verified, created_at, last_password_change FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.LastPasswordChange,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, email, email_verified, created_at, last_password_change FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.EmailVerified,
			&i.CreatedAt,
			&i.LastPasswordChange,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    password = COALESCE($1, password),
    email = COALESCE($2, email),
    email_verified = COALESCE($3, email_verified),
    last_password_change = COALESCE($4, last_password_change)
WHERE username = $5
RETURNING id, username, password, email, email_verified, created_at, last_password_change
`

type UpdateUserParams struct {
	Password           pgtype.Text        `json:"password"`
	Email              pgtype.Text        `json:"email"`
	EmailVerified      pgtype.Bool        `json:"email_verified"`
	LastPasswordChange pgtype.Timestamptz `json:"last_password_change"`
	Username           string             `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Password,
		arg.Email,
		arg.EmailVerified,
		arg.LastPasswordChange,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.LastPasswordChange,
	)
	return i, err
}
