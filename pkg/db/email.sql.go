// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email.sql

package db

import (
	"context"
	"time"
)

const createVerifyEmails = `-- name: CreateVerifyEmails :one
INSERT INTO verify_emails (
    username,
    email,
    code,
    expires_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, email, code, used, created_at, expires_at
`

type CreateVerifyEmailsParams struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Code      string    `json:"code"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateVerifyEmails(ctx context.Context, arg CreateVerifyEmailsParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmails,
		arg.Username,
		arg.Email,
		arg.Code,
		arg.ExpiresAt,
	)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.Used,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteVerifyEmails = `-- name: DeleteVerifyEmails :exec
DELETE FROM verify_emails WHERE username = $1
`

func (q *Queries) DeleteVerifyEmails(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteVerifyEmails, username)
	return err
}

const getPendingVerifyEmails = `-- name: GetPendingVerifyEmails :many
SELECT id, username, email, code, used, created_at, expires_at FROM verify_emails WHERE username = $1 AND used = $2 AND expires_at >= $3
`

type GetPendingVerifyEmailsParams struct {
	Username  string    `json:"username"`
	Used      bool      `json:"used"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) GetPendingVerifyEmails(ctx context.Context, arg GetPendingVerifyEmailsParams) ([]VerifyEmail, error) {
	rows, err := q.db.Query(ctx, getPendingVerifyEmails, arg.Username, arg.Used, arg.ExpiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VerifyEmail{}
	for rows.Next() {
		var i VerifyEmail
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Code,
			&i.Used,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerifyEmails = `-- name: GetVerifyEmails :one
SELECT id, username, email, code, used, created_at, expires_at FROM verify_emails WHERE id = $1 AND code = $2
`

type GetVerifyEmailsParams struct {
	ID   int64  `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) GetVerifyEmails(ctx context.Context, arg GetVerifyEmailsParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmails, arg.ID, arg.Code)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.Used,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateCodeUsed = `-- name: UpdateCodeUsed :one
UPDATE verify_emails
SET used = true
WHERE code = $1
RETURNING id, username, email, code, used, created_at, expires_at
`

func (q *Queries) UpdateCodeUsed(ctx context.Context, code string) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateCodeUsed, code)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.Used,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
