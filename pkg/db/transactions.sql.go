// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    account_id,
    date,
    payee_id,
    category_id,
    memo,
    amount,
    cleared,
    reconciled
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, account_id, date, payee_id, category_id, memo, amount, approved, cleared, reconciled
`

type CreateTransactionParams struct {
	AccountID  uuid.UUID   `json:"account_id"`
	Date       pgtype.Date `json:"date"`
	PayeeID    uuid.UUID   `json:"payee_id"`
	CategoryID pgtype.UUID `json:"category_id"`
	Memo       pgtype.Text `json:"memo"`
	Amount     int32       `json:"amount"`
	Cleared    bool        `json:"cleared"`
	Reconciled bool        `json:"reconciled"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.AccountID,
		arg.Date,
		arg.PayeeID,
		arg.CategoryID,
		arg.Memo,
		arg.Amount,
		arg.Cleared,
		arg.Reconciled,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Date,
		&i.PayeeID,
		&i.CategoryID,
		&i.Memo,
		&i.Amount,
		&i.Approved,
		&i.Cleared,
		&i.Reconciled,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getTransactions = `-- name: GetTransactions :many
select trans.id, trans.account_id, trans.date, trans.payee_id, trans.category_id, trans.memo, trans.amount, trans.approved, trans.cleared, trans.reconciled
from transactions trans, accounts accts
where trans.account_id = accts.id AND accts.budget_id = $1
`

func (q *Queries) GetTransactions(ctx context.Context, budgetID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Date,
			&i.PayeeID,
			&i.CategoryID,
			&i.Memo,
			&i.Amount,
			&i.Approved,
			&i.Cleared,
			&i.Reconciled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsById = `-- name: GetTransactionsById :one
SELECT id, account_id, date, payee_id, category_id, memo, amount, approved, cleared, reconciled FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionsById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionsById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Date,
		&i.PayeeID,
		&i.CategoryID,
		&i.Memo,
		&i.Amount,
		&i.Approved,
		&i.Cleared,
		&i.Reconciled,
	)
	return i, err
}

const getTransactionsView = `-- name: GetTransactionsView :many
SELECT id, account_id, account_name, budget_id, date, payee_id, payee_name, category_id, category_name, memo, amount, approved, cleared, reconciled FROM transactions_view WHERE budget_id = $1
`

func (q *Queries) GetTransactionsView(ctx context.Context, budgetID uuid.UUID) ([]TransactionsView, error) {
	rows, err := q.db.Query(ctx, getTransactionsView, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionsView{}
	for rows.Next() {
		var i TransactionsView
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountName,
			&i.BudgetID,
			&i.Date,
			&i.PayeeID,
			&i.PayeeName,
			&i.CategoryID,
			&i.CategoryName,
			&i.Memo,
			&i.Amount,
			&i.Approved,
			&i.Cleared,
			&i.Reconciled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsViewById = `-- name: GetTransactionsViewById :one
SELECT id, account_id, account_name, budget_id, date, payee_id, payee_name, category_id, category_name, memo, amount, approved, cleared, reconciled FROM transactions_view WHERE id = $1
`

func (q *Queries) GetTransactionsViewById(ctx context.Context, id uuid.UUID) (TransactionsView, error) {
	row := q.db.QueryRow(ctx, getTransactionsViewById, id)
	var i TransactionsView
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountName,
		&i.BudgetID,
		&i.Date,
		&i.PayeeID,
		&i.PayeeName,
		&i.CategoryID,
		&i.CategoryName,
		&i.Memo,
		&i.Amount,
		&i.Approved,
		&i.Cleared,
		&i.Reconciled,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    account_id = COALESCE($2, account_id),
    date= COALESCE($3, date),
    payee_id = COALESCE($4, payee_id),
    category_id = COALESCE($5, category_id),
    memo = COALESCE($6, memo),
    amount = COALESCE($7, amount),
    approved = COALESCE($8, approved),
    cleared = COALESCE($9, cleared),
    reconciled = COALESCE($10, reconciled)
WHERE id = $1
RETURNING id, account_id, date, payee_id, category_id, memo, amount, approved, cleared, reconciled
`

type UpdateTransactionParams struct {
	ID         uuid.UUID   `json:"id"`
	AccountID  pgtype.UUID `json:"account_id"`
	Date       pgtype.Date `json:"date"`
	PayeeID    pgtype.UUID `json:"payee_id"`
	CategoryID pgtype.UUID `json:"category_id"`
	Memo       pgtype.Text `json:"memo"`
	Amount     pgtype.Int4 `json:"amount"`
	Approved   pgtype.Bool `json:"approved"`
	Cleared    pgtype.Bool `json:"cleared"`
	Reconciled pgtype.Bool `json:"reconciled"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.ID,
		arg.AccountID,
		arg.Date,
		arg.PayeeID,
		arg.CategoryID,
		arg.Memo,
		arg.Amount,
		arg.Approved,
		arg.Cleared,
		arg.Reconciled,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Date,
		&i.PayeeID,
		&i.CategoryID,
		&i.Memo,
		&i.Amount,
		&i.Approved,
		&i.Cleared,
		&i.Reconciled,
	)
	return i, err
}
